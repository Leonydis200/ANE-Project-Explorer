{"version":3,"file":"CyberDashboard-BiDkb_IL.js","sources":["../../src/components/ui/card.tsx","../../src/components/ui/progress.tsx","../../src/components/ui/icons.tsx","../../src/services/DataStream.ts","../../src/services/SelfDiagnosticsService.ts","../../src/components/CyberDashboard.tsx"],"sourcesContent":["import React from 'react';\n\ninterface CardProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport function Card({ children, className = '' }: CardProps) {\n  return (\n    <div\n      className={`bg-white shadow rounded border border-gray-200 ${className}`}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport function CardContent({ children, className = '' }: CardProps) {\n  return <div className={`p-4 ${className}`}>{children}</div>;\n}\n","import React from 'react';\n\ninterface ProgressProps {\n  value: number;\n  className?: string;\n}\n\nexport function Progress({ value, className = '' }: ProgressProps) {\n  return (\n    <div className={`w-full bg-gray-300 rounded overflow-hidden ${className}`}>\n      <div\n        style={{ width: `${value}%` }}\n        className=\"bg-blue-600 h-2\"\n      />\n    </div>\n  );\n}\n","// src/components/ui/icons.tsx\nimport React from 'react';\n\nexport function AlertTriangle(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      viewBox=\"0 0 24 24\"\n      className=\"text-yellow-500 mr-2 h-4 w-4\"\n      aria-hidden=\"true\"\n    >\n      <path d=\"M10.29 3.86L1.82 18a2 2 0 001.71 3h16.94a2 2 0 001.71-3L13.71 3.86a2 2 0 00-3.42 0z\" />\n      <line x1={12} y1={9} x2={12} y2={13} />\n      <line x1={12} y1={17} x2={12} y2={17} />\n    </svg>\n  );\n}\n\nexport function CheckCircle2(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      viewBox=\"0 0 24 24\"\n      className=\"text-green-500 h-5 w-5\"\n      aria-hidden=\"true\"\n    >\n      <path d=\"M9 12l2 2 4-4\" />\n      <circle cx={12} cy={12} r={10} />\n    </svg>\n  );\n}\n\nexport function AlertCircle(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      viewBox=\"0 0 24 24\"\n      className=\"text-red-500 h-4 w-4\"\n      aria-hidden=\"true\"\n    >\n      <circle cx={12} cy={12} r={10} />\n      <line x1={12} y1={8} x2={12} y2={12} />\n      <line x1={12} y1={16} x2={12} y2={16} />\n    </svg>\n  );\n}\n","import { io, Socket } from 'socket.io-client';\nimport { BehaviorSubject, Observable, interval } from 'rxjs';\nimport { map, mergeMap, retryWhen, delay, take } from 'rxjs/operators';\n\nexport interface SystemMetrics {\n  cpu: number;\n  memory: number;\n  network: number;\n  errorRate: number;\n  throughput: number;\n  latency: number;\n}\n\nexport interface EnhancedSystemMetrics extends SystemMetrics {\n  uptime: number;\n  nodes: number;\n  status: string;\n  statusLevel: 'healthy' | 'degraded' | 'critical';\n  health: number;\n  nlp: {\n    throughput: number;\n    models: number;\n    latency: number;\n    health: number;\n    status: 'healthy' | 'degraded' | 'critical';\n  };\n  emotions: {\n    sentimentAccuracy: number;\n    emotionalRange: number;\n    health: number;\n    status: 'healthy' | 'degraded' | 'critical';\n  };\n  prediction: {\n    predictionAccuracy: number;\n    modelsTrained: number;\n    health: number;\n    status: 'healthy' | 'degraded' | 'critical';\n  };\n  control: {\n    activeProcesses: number;\n    systemLoad: number;\n    alerts: number;\n    health: number;\n    status: 'healthy' | 'degraded' | 'critical';\n  };\n}\n\nexport interface AdvancedMetrics extends EnhancedSystemMetrics {\n  performance: {\n    cpu: {\n      usage: number;\n      temperature: number;\n      cores: number[];\n    };\n    memory: {\n      total: number;\n      used: number;\n      free: number;\n      cached: number;\n    };\n    storage: {\n      total: number;\n      used: number;\n      free: number;\n      readSpeed: number;\n      writeSpeed: number;\n    };\n  };\n  selfImprovement: {\n    lastOptimization: Date;\n    optimizationScore: number;\n    learningRate: number;\n    adaptationLevel: number;\n  };\n}\n\nexport class DataStreamService {\n  private socket: Socket;\n  private metricsSubject = new BehaviorSubject<AdvancedMetrics>(this.getInitialMetrics());\n  private connectionStatus = new BehaviorSubject<'connected' | 'disconnected' | 'error'>('disconnected');\n  private maxReconnectAttempts = 5;\n  private reconnectAttempts = 0;\n\n  constructor() {\n    this.socket = this.initializeSocket();\n    this.setupSocketHandlers();\n  }\n\n  private initializeSocket(): Socket {\n    return io(process.env.REACT_APP_WS_URL || 'ws://localhost:3001', {\n      reconnection: true,\n      reconnectionAttempts: this.maxReconnectAttempts,\n      reconnectionDelay: 1000,\n      timeout: 5000,\n      transports: ['websocket'],\n    });\n  }\n\n  private setupSocketHandlers() {\n    this.socket.on('connect', () => {\n      this.connectionStatus.next('connected');\n      this.reconnectAttempts = 0;\n      console.log('Connected to metrics server');\n    });\n\n    this.socket.on('disconnect', () => {\n      this.connectionStatus.next('disconnected');\n      this.handleDisconnect();\n    });\n\n    this.socket.on('metrics', (data: AdvancedMetrics) => {\n      this.metricsSubject.next(data);\n    });\n\n    this.socket.on('error', (error: any) => {\n      this.connectionStatus.next('error');\n      console.error('Socket error:', error);\n    });\n  }\n\n  private handleDisconnect() {\n    this.reconnectAttempts++;\n    if (this.reconnectAttempts <= this.maxReconnectAttempts) {\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      setTimeout(() => {\n        this.socket.connect();\n      }, 1000);\n    } else {\n      console.error('Max reconnect attempts reached');\n    }\n  }\n\n  public setupMetricsCollection() {\n    interval(1000).pipe(\n      mergeMap(() => this.collectSystemMetrics().pipe(\n        retryWhen(errors => errors.pipe(\n          delay(1000),\n          take(this.maxReconnectAttempts)\n        ))\n      ))\n    ).subscribe({\n      next: metrics => this.metricsSubject.next(metrics),\n      error: error => {\n        console.error('Metrics collection error:', error);\n        this.connectionStatus.next('error');\n      }\n    });\n  }\n\n  private collectSystemMetrics(): Observable<AdvancedMetrics> {\n    return new Observable<AdvancedMetrics>(subscriber => {\n      const handler = (metrics: AdvancedMetrics) => {\n        subscriber.next(metrics);\n        subscriber.complete();\n      };\n      \n      this.socket.once('systemMetrics', handler);\n      this.socket.emit('requestSystemMetrics');\n      \n      return () => {\n        this.socket.off('systemMetrics', handler);\n      };\n    });\n  }\n\n  public getMetricsStream(): Observable<AdvancedMetrics> {\n    return this.metricsSubject.asObservable();\n  }\n\n  public getConnectionStatus() {\n    return this.connectionStatus.asObservable();\n  }\n\n  public sendCommand(type: string, payload: any) {\n    return new Promise((resolve, reject) => {\n      this.socket.emit('command', { type, payload }, (response: any) => {\n        if (response.success) {\n          resolve(response.data);\n        } else {\n          reject(new Error(response.error));\n        }\n      });\n    });\n  }\n\n  private getInitialMetrics(): AdvancedMetrics {\n    return {\n      cpu: 0,\n      memory: 0,\n      network: 0,\n      errorRate: 0,\n      throughput: 0,\n      latency: 0,\n      uptime: 0,\n      nodes: 0,\n      status: 'unknown',\n      statusLevel: 'healthy',\n      health: 100,\n      nlp: {\n        throughput: 0,\n        models: 0,\n        latency: 0,\n        health: 100,\n        status: 'healthy',\n      },\n      emotions: {\n        sentimentAccuracy: 0,\n        emotionalRange: 0,\n        health: 100,\n        status: 'healthy',\n      },\n      prediction: {\n        predictionAccuracy: 0,\n        modelsTrained: 0,\n        health: 100,\n        status: 'healthy',\n      },\n      control: {\n        activeProcesses: 0,\n        systemLoad: 0,\n        alerts: 0,\n        health: 100,\n        status: 'healthy',\n      },\n      performance: {\n        cpu: {\n          usage: 0,\n          temperature: 0,\n          cores: [],\n        },\n        memory: {\n          total: 0,\n          used: 0,\n          free: 0,\n          cached: 0,\n        },\n        storage: {\n          total: 0,\n          used: 0,\n          free: 0,\n          readSpeed: 0,\n          writeSpeed: 0,\n        },\n      },\n      selfImprovement: {\n        lastOptimization: new Date(),\n        optimizationScore: 100,\n        learningRate: 0.001,\n        adaptationLevel: 0,\n      },\n    };\n  }\n}\n\nexport const dataStream = new DataStreamService();","import { BehaviorSubject, interval, lastValueFrom } from 'rxjs';\nimport * as tf from '@tensorflow/tfjs';\nimport { dataStream } from './DataStream';\n\ninterface DiagnosticResult {\n  status: 'success' | 'warning' | 'error';\n  message: string;\n  details: any;\n  timestamp: number;\n}\n\ninterface SystemHealth {\n  overall: number;\n  components: Record<string, number>;\n  lastCheck: Date;\n  issues: string[];\n}\n\nexport class SelfDiagnosticsService {\n  private healthSubject = new BehaviorSubject<SystemHealth>({\n    overall: 100,\n    components: {},\n    lastCheck: new Date(),\n    issues: [],\n  });\n  private alertsSubject = new BehaviorSubject<string[]>([]);\n  private feedbackSubject = new BehaviorSubject<string>('Idle');\n  private diagnosticsHistory = new BehaviorSubject<any[]>([]);\n  private mlModel: tf.LayersModel | null = null;\n\n  constructor() {\n    this.initializeMonitoring();\n    this.setupAutomaticRepair();\n    this.initializeMLModel();\n  }\n\n  private initializeMonitoring() {\n    interval(60000).subscribe(async () => {\n      const results = await this.runDiagnostics();\n      this.updateSystemHealth(results);\n      this.handleCriticalIssues(results);\n    });\n  }\n\n  private setupAutomaticRepair() {\n    interval(300000).subscribe(async () => {\n      const health = this.healthSubject.value;\n      if (health.issues.length > 0) {\n        await this.performAutoRepair(health.issues);\n      }\n    });\n  }\n\n  public async runDiagnostics(): Promise<DiagnosticResult[]> {\n    this.feedbackSubject.next('Running diagnostics...');\n    \n    const checks = await Promise.all([\n      this.checkConnectivity(),\n      this.checkPerformance(),\n      this.checkStorage(),\n      this.checkModules(),\n      this.checkML(),\n      this.checkSecurity(),\n    ]);\n\n    const analysis = this.analyzeResults(checks);\n    if (analysis.issues.length > 0) {\n      await this.autoRepair(analysis.issues);\n    }\n\n    this.diagnosticsHistory.next([\n      ...this.diagnosticsHistory.value,\n      { timestamp: new Date(), results: checks }\n    ]);\n\n    this.feedbackSubject.next('Diagnostics complete');\n    return checks;\n  }\n\n  private async checkConnectivity(): Promise<DiagnosticResult> {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 100));\n      return {\n        status: 'success',\n        message: 'Connectivity stable',\n        details: { ping: 42 },\n        timestamp: Date.now(),\n      };\n    } catch (error) {\n      return {\n        status: 'error',\n        message: 'Connectivity check failed',\n        details: error,\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  private async checkPerformance(): Promise<DiagnosticResult> {\n    try {\n      const metrics = await lastValueFrom(dataStream.getMetricsStream());\n      const performanceScore = this.calculatePerformanceScore(metrics);\n      \n      return {\n        status: performanceScore > 80 ? 'success' : \n               performanceScore > 60 ? 'warning' : 'error',\n        message: `Performance score: ${performanceScore.toFixed(1)}`,\n        details: { metrics, score: performanceScore },\n        timestamp: Date.now(),\n      };\n    } catch (error) {\n      return {\n        status: 'error',\n        message: 'Performance check failed',\n        details: error,\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  private calculatePerformanceScore(metrics: any): number {\n    return (\n      (metrics.cpu * 0.2) +\n      (metrics.memory * 0.2) +\n      (metrics.network * 0.2) +\n      (metrics.throughput * 0.2) +\n      (100 - metrics.errorRate * 10) * 0.2\n    );\n  }\n\n  private async checkStorage(): Promise<DiagnosticResult> {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 50));\n      return {\n        status: 'success',\n        message: 'Storage OK',\n        details: { freeSpace: '85%' },\n        timestamp: Date.now(),\n      };\n    } catch (error) {\n      return {\n        status: 'error',\n        message: 'Storage check failed',\n        details: error,\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  private async checkModules(): Promise<DiagnosticResult> {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 75));\n      return {\n        status: 'success',\n        message: 'Modules operating normally',\n        details: { loadedModules: 42 },\n        timestamp: Date.now(),\n      };\n    } catch (error) {\n      return {\n        status: 'error',\n        message: 'Module check failed',\n        details: error,\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  private async checkML(): Promise<DiagnosticResult> {\n    try {\n      if (!this.mlModel) {\n        return {\n          status: 'warning',\n          message: 'ML model not loaded',\n          details: {},\n          timestamp: Date.now(),\n        };\n      }\n\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return {\n        status: 'success',\n        message: 'ML diagnostics passed',\n        details: { accuracy: 0.92 },\n        timestamp: Date.now(),\n      };\n    } catch (error) {\n      return {\n        status: 'error',\n        message: 'ML diagnostics failed',\n        details: error,\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  private async checkSecurity(): Promise<DiagnosticResult> {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 150));\n      return {\n        status: 'success',\n        message: 'Security checks clean',\n        details: { threatsDetected: 0 },\n        timestamp: Date.now(),\n      };\n    } catch (error) {\n      return {\n        status: 'error',\n        message: 'Security check failed',\n        details: error,\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  private analyzeResults(results: DiagnosticResult[]) {\n    const issues = results\n      .filter(r => r.status !== 'success')\n      .map(r => `${r.message} (${r.status})`);\n    \n    return { issues };\n  }\n\n  private async autoRepair(issues: string[]) {\n    for (const issue of issues) {\n      try {\n        await this.attemptRepair(issue);\n        console.log(`Auto-repaired issue: ${issue}`);\n      } catch (error) {\n        console.error(`Failed to repair issue: ${issue}`, error);\n      }\n    }\n  }\n\n  private async performAutoRepair(issues: string[]) {\n    this.feedbackSubject.next('Performing auto-repair...');\n    \n    for (const issue of issues) {\n      try {\n        await this.repairIssue(issue);\n        this.logRepairSuccess(issue);\n      } catch (error) {\n        this.logRepairFailure(issue, error);\n        await this.escalateIssue(issue, error);\n      }\n    }\n    \n    this.feedbackSubject.next('Auto-repair completed');\n  }\n\n  private async attemptRepair(issue: string): Promise<void> {\n    const repairStrategies: Record<string, () => Promise<void>> = {\n      'high-cpu': async () => {\n        await dataStream.sendCommand('optimize', { target: 'cpu' });\n      },\n      'memory-leak': async () => {\n        await dataStream.sendCommand('optimize', { target: 'memory' });\n      },\n      'high-latency': async () => {\n        await dataStream.sendCommand('optimize', { target: 'network' });\n      },\n      'connectivity': async () => {\n        await dataStream.sendCommand('reconnect', {});\n      },\n    };\n\n    const strategy = repairStrategies[issue.toLowerCase().split(' ')[0]];\n    if (strategy) {\n      await strategy();\n    } else {\n      throw new Error(`No repair strategy for issue: ${issue}`);\n    }\n  }\n\n  private async repairIssue(issue: string) {\n    await this.attemptRepair(issue);\n  }\n\n  private async escalateIssue(issue: string, error: any) {\n    console.warn(`Escalating issue: ${issue}`, error);\n    this.alertsSubject.next([\n      ...this.alertsSubject.value,\n      `Failed to repair: ${issue}. Error: ${error instanceof Error ? error.message : String(error)}`\n    ]);\n  }\n\n  private updateSystemHealth(results: DiagnosticResult[]) {\n    const issues = results\n      .filter(r => r.status !== 'success')\n      .map(r => r.message);\n    \n    const healthScore = 100 - (issues.length * 15);\n    \n    this.healthSubject.next({\n      overall: Math.max(0, healthScore),\n      components: {\n        cpu: results.find(r => r.message.includes('CPU'))?.status === 'success' ? 100 : 50,\n        memory: results.find(r => r.message.includes('Memory'))?.status === 'success' ? 100 : 50,\n        network: results.find(r => r.message.includes('Network'))?.status === 'success' ? 100 : 50,\n      },\n      lastCheck: new Date(),\n      issues,\n    });\n\n    if (issues.length > 0) {\n      this.alertsSubject.next(issues);\n    }\n  }\n\n  private handleCriticalIssues(results: DiagnosticResult[]) {\n    const criticals = results.filter(r => r.status === 'error');\n    if (criticals.length > 0) {\n      this.alertsSubject.next(criticals.map(r => r.message));\n      this.performAutoRepair(criticals.map(r => r.message));\n    }\n  }\n\n  private logRepairSuccess(issue: string) {\n    console.log(`Successfully repaired issue: ${issue}`);\n    this.feedbackSubject.next(`Repaired: ${issue}`);\n  }\n\n  private logRepairFailure(issue: string, error: any) {\n    console.error(`Repair failed for issue: ${issue}`, error);\n    this.feedbackSubject.next(`Failed to repair: ${issue}`);\n  }\n\n  private async initializeMLModel() {\n    try {\n      this.mlModel = await tf.loadLayersModel('/models/diagnostics-model.json');\n      this.startPredictiveMaintenance();\n    } catch (error) {\n      console.error('Failed to load ML model:', error);\n      this.feedbackSubject.next('ML model loading failed');\n    }\n  }\n\n  private startPredictiveMaintenance() {\n    interval(300000).subscribe(async () => {\n      try {\n        const prediction = await this.predictSystemIssues();\n        if (prediction.risk > 0.7) {\n          await this.preventiveMaintenance(prediction.issues);\n        }\n      } catch (error) {\n        console.error('Predictive maintenance error:', error);\n      }\n    });\n  }\n\n  private async predictSystemIssues(): Promise<{ risk: number; issues: string[] }> {\n    if (!this.mlModel) {\n      throw new Error('ML model not loaded');\n    }\n\n    try {\n      const metrics = await lastValueFrom(dataStream.getMetricsStream());\n      \n      const input = tf.tensor2d([\n        [\n          metrics.cpu,\n          metrics.memory,\n          metrics.network,\n          metrics.throughput,\n          metrics.errorRate\n        ]\n      ]);\n\n      const prediction = this.mlModel.predict(input) as tf.Tensor;\n      const predictionData = await prediction.data();\n      \n      input.dispose();\n      prediction.dispose();\n\n      const risk = predictionData[0];\n      const potentialIssues = [];\n      \n      if (predictionData[1] > 0.5) potentialIssues.push('CPU overload');\n      if (predictionData[2] > 0.5) potentialIssues.push('Memory leak');\n      if (predictionData[3] > 0.5) potentialIssues.push('Network congestion');\n\n      return {\n        risk,\n        issues: potentialIssues\n      };\n    } catch (error) {\n      console.error('Prediction failed:', error);\n      throw error;\n    }\n  }\n\n  private async preventiveMaintenance(potentialIssues: string[]) {\n    this.feedbackSubject.next('Performing preventive maintenance...');\n    \n    const maintenanceActions: Record<string, () => Promise<void>> = {\n      'CPU overload': async () => {\n        await dataStream.sendCommand('throttle', { target: 'cpu', level: 0.8 });\n      },\n      'Memory leak': async () => {\n        await dataStream.sendCommand('restart', { component: 'memory-manager' });\n      },\n      'Network congestion': async () => {\n        await dataStream.sendCommand('optimize', { target: 'network', qos: 'high' });\n      }\n    };\n\n    for (const issue of potentialIssues) {\n      try {\n        const action = maintenanceActions[issue];\n        if (action) {\n          await action();\n          console.log(`Preventive action taken for: ${issue}`);\n        }\n      } catch (error) {\n        console.error(`Preventive action failed for ${issue}:`, error);\n      }\n    }\n\n    this.feedbackSubject.next('Preventive maintenance completed');\n  }\n\n  public getHealthObservable() {\n    return this.healthSubject.asObservable();\n  }\n\n  public getAlertsObservable() {\n    return this.alertsSubject.asObservable();\n  }\n\n  public getFeedbackObservable() {\n    return this.feedbackSubject.asObservable();\n  }\n\n  public getDiagnosticsHistory() {\n    return this.diagnosticsHistory.asObservable();\n  }\n\n  public async forceDiagnostics() {\n    return this.runDiagnostics();\n  }\n\n  public async forceRepair() {\n    const health = this.healthSubject.value;\n    if (health.issues.length > 0) {\n      return this.performAutoRepair(health.issues);\n    }\n    return Promise.resolve();\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport { AlertCircle, CheckCircle2, AlertTriangle } from '@/components/ui/icons';\nimport { Subscription } from 'rxjs';\nimport { SelfDiagnosticsService } from '@/services/SelfDiagnosticsService';\n\nconst diagnosticsService = new SelfDiagnosticsService();\nconst PAGE_SIZE = 10;\n\nexport default function CyberDashboard() {\n  const [health, setHealth] = useState(null);\n  const [alerts, setAlerts] = useState<string[]>([]);\n  const [feedback, setFeedback] = useState('Idle');\n  const [history, setHistory] = useState<any[]>([]);\n  const [page, setPage] = useState(0);\n\n  useEffect(() => {\n    const subscriptions: Subscription[] = [\n      diagnosticsService.getHealthObservable().subscribe(setHealth),\n      diagnosticsService.getAlertsObservable().subscribe(setAlerts),\n      diagnosticsService.getFeedbackObservable().subscribe(setFeedback),\n      diagnosticsService.getDiagnosticsHistory().subscribe(setHistory),\n    ];\n\n    return () => subscriptions.forEach(sub => sub.unsubscribe());\n  }, []);\n\n  const pagedHistory = history.slice(page * PAGE_SIZE, (page + 1) * PAGE_SIZE);\n  const totalPages = Math.ceil(history.length / PAGE_SIZE);\n\n  return (\n    <div className=\"p-6 grid grid-cols-1 md:grid-cols-2 gap-6\">\n      <Card className=\"col-span-1 md:col-span-2\">\n        <CardContent>\n          <h2 className=\"text-xl font-bold mb-2\">System Health</h2>\n          {health ? (\n            <>\n              <p className=\"mb-1\">Overall: {health.overall}%</p>\n              <Progress value={health.overall} className=\"mb-3\" />\n              <div className=\"grid grid-cols-3 gap-2\">\n                {Object.entries(health.components).map(([key, value]) => (\n                  <div key={key} className=\"text-sm\">\n                    <p className=\"font-medium capitalize\">{key}</p>\n                    <Progress value={value} />\n                  </div>\n                ))}\n              </div>\n              <p className=\"mt-3 text-xs text-muted-foreground\">\n                Last Checked: {new Date(health.lastCheck).toLocaleString()}\n              </p>\n            </>\n          ) : (\n            <p>Loading system health...</p>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardContent>\n          <h2 className=\"text-lg font-bold mb-2\">Current Alerts</h2>\n          {alerts.length > 0 ? (\n            <ul className=\"space-y-1\">\n              {alerts.map((alert, idx) => (\n                <li key={idx} className=\"flex items-center text-sm\">\n                  <AlertTriangle />\n                  {alert}\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p className=\"text-sm text-muted-foreground\">No current alerts</p>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardContent>\n          <h2 className=\"text-lg font-bold mb-2\">Feedback</h2>\n          <div className=\"flex items-center gap-2\">\n            <CheckCircle2 />\n            <span className=\"text-sm\">{feedback}</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"col-span-1 md:col-span-2\">\n        <CardContent>\n          <h2 className=\"text-lg font-bold mb-2\">Diagnostics History</h2>\n          <div className=\"overflow-auto max-h-64 text-sm\">\n            {pagedHistory.length > 0 ? (\n              <ul className=\"space-y-2\">\n                {pagedHistory.map((entry, index) => (\n                  <li key={index} className=\"border-b pb-2\">\n                    <p className=\"text-muted-foreground text-xs\">\n                      {new Date(entry.timestamp).toLocaleString()}\n                    </p>\n                    <ul className=\"pl-4 list-disc\">\n                      {entry.results.map((result, idx) => (\n                        <li\n                          key={idx}\n                          className={`text-sm ${\n                            result.status === 'error'\n                              ? 'text-red-600'\n                              : result.status === 'warning'\n                              ? 'text-yellow-600'\n                              : 'text-green-600'\n                          }`}\n                        >\n                          {result.message} — {result.status.toUpperCase()}\n                        </li>\n                      ))}\n                    </ul>\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p>No diagnostics history available</p>\n            )}\n          </div>\n\n          {totalPages > 1 && (\n            <div className=\"flex justify-end items-center gap-2 mt-2\">\n              <button\n                onClick={() => setPage(p => Math.max(p - 1, 0))}\n                className=\"text-sm px-2 py-1 border rounded disabled:opacity-50\"\n                disabled={page === 0}\n              >\n                Previous\n              </button>\n              <span className=\"text-xs text-muted-foreground\">\n                Page {page + 1} of {totalPages}\n              </span>\n              <button\n                onClick={() => setPage(p => Math.min(p + 1, totalPages - 1))}\n                className=\"text-sm px-2 py-1 border rounded disabled:opacity-50\"\n                disabled={page >= totalPages - 1}\n              >\n                Next\n              </button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"],"names":["Card","children","className","React","CardContent","Progress","value","AlertTriangle","props","CheckCircle2","DataStreamService","BehaviorSubject","io","define_process_env_default","data","error","interval","mergeMap","retryWhen","errors","delay","take","metrics","Observable","subscriber","handler","type","payload","resolve","reject","response","dataStream","SelfDiagnosticsService","results","health","checks","analysis","lastValueFrom","performanceScore","r","issues","issue","strategy","healthScore","criticals","tf.loadLayersModel","prediction","input","tf.tensor2d","predictionData","risk","potentialIssues","maintenanceActions","action","diagnosticsService","PAGE_SIZE","CyberDashboard","setHealth","useState","alerts","setAlerts","feedback","setFeedback","history","setHistory","page","setPage","useEffect","subscriptions","sub","pagedHistory","totalPages","key","alert","idx","entry","index","result","p"],"mappings":"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"}