{"version":3,"file":"CyberTerminal-eWsgX4e6.js","sources":["../../src/components/CyberTerminal.tsx"],"sourcesContent":["// src/components/CyberTerminal.tsx\nimport React, {\n  useState,\n  useRef,\n  useEffect,\n  KeyboardEvent,\n  ReactNode,\n} from 'react';\nimport parseArgs from 'minimist';\n\n// --- Helper: parse a line with <color>text</color> and #NODE#Name#/NODE# markers\nfunction parseLine(line: string, onNodeClick: (name: string) => void): ReactNode[] {\n  const elements: ReactNode[] = [];\n  let lastIndex = 0;\n\n  // Combined regex for color tags and node markers\n  const regex = /<(?<col>green|red|yellow|blue)>(?<text>.*?)<\\/\\k<col>>|#NODE#(?<node>[\\w-]+)#\\/NODE#/g;\n  let match;\n\n  while ((match = regex.exec(line)) !== null) {\n    const { index } = match;\n    // push preceding text\n    if (index > lastIndex) {\n      elements.push(line.slice(lastIndex, index));\n    }\n    if (match.groups?.col) {\n      const color = match.groups.col;\n      const text = match.groups.text;\n      elements.push(\n        <span\n          key={index}\n          className={{\n            green: 'text-green-400',\n            red: 'text-red-400',\n            yellow: 'text-yellow-300',\n            blue: 'text-blue-400',\n          }[color]}\n        >\n          {text}\n        </span>\n      );\n    } else if (match.groups?.node) {\n      const nodeName = match.groups.node;\n      elements.push(\n        <button\n          key={index}\n          className=\"text-cyber-green underline ml-1\"\n          onClick={() => onNodeClick(nodeName)}\n        >\n          {nodeName}\n        </button>\n      );\n    }\n    lastIndex = regex.lastIndex;\n  }\n\n  // remaining text\n  if (lastIndex < line.length) {\n    elements.push(line.slice(lastIndex));\n  }\n  return elements;\n}\n\n// --- Commands & Handlers ---\ntype ParsedArgs = { _: string[]; [key: string]: any };\ntype Handler = (\n  args: ParsedArgs,\n  out: string[],\n  setOut: React.Dispatch<React.SetStateAction<string[]>>\n) => void;\n\nconst handlers: Record<string, Handler> = {\n  help: (_args, out, setOut) =>\n    setOut([\n      ...out,\n      '<green>Available commands:</green>',\n      '  help          – Show this help',\n      '  status        – Show <green>system status</green>',\n      '  nodes         – List nodes (clickable!)',\n      '  clear         – Clear output',\n      '  scan          – Run <yellow>scan</yellow>',\n    ]),\n\n  status: (_args, out, setOut) =>\n    setOut([\n      ...out,\n      '<green>System Status:</green> <blue>ONLINE</blue>',\n      'Uptime: <blue>99.97%</blue>',\n      'Threat Level: <yellow>NOMINAL</yellow>',\n    ]),\n\n  nodes: (_args, out, setOut) => {\n    setOut([...out, 'Nodes:']);\n    ['Core-01', 'Core-02', 'Edge-01'].forEach(n =>\n      setOut(prev => [...prev, `  #NODE#${n}#/NODE#`])\n    );\n  },\n\n  clear: (_args, _out, setOut) => setOut([]),\n\n  scan: (_args, out, setOut) => {\n    setOut([...out, 'Initiating <yellow>scan</yellow>...']);\n    let pct = 0;\n    const iv = setInterval(() => {\n      pct += 25;\n      setOut(prev => [...prev, `<blue>Progress:</blue> ${pct}%`]);\n      if (pct >= 100) {\n        clearInterval(iv);\n        setOut(prev => [...prev, '<green>Scan complete.</green>']);\n      }\n    }, 400);\n  },\n};\n\nconst aliasMap: Record<string, string> = {\n  h: 'help',\n  s: 'status',\n  n: 'nodes',\n  c: 'clear',\n  sc: 'scan',\n};\n\nexport default function CyberTerminal() {\n  const [output, setOutput] = useState<string[]>([]);\n  const [input, setInput] = useState('');\n  const terminalRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    terminalRef.current?.scrollTo(0, terminalRef.current.scrollHeight);\n  }, [output]);\n\n  const handleNodeClick = (nodeName: string) => {\n    alert(`Drilling into node ${nodeName}...`);\n    // Implement drill-down logic here\n  };\n\n  const run = (line: string) => {\n    const parts = line.trim().split(/\\s+/);\n    if (!parts[0]) return;\n    const raw = parts[0].toLowerCase();\n    const cmd = aliasMap[raw] || raw;\n    const handler = handlers[cmd];\n    const args = parseArgs(parts.slice(1));\n    setOutput(prev => [...prev, `ANE:~$ ${line}`]);\n    if (handler) handler(args, output, setOutput);\n    else setOutput(prev => [...prev, `<red>Unknown command:</red> ${raw}`]);\n  };\n\n  const onKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      run(input);\n      setInput('');\n    }\n  };\n\n  return (\n    <div\n      ref={terminalRef}\n      className=\"bg-black text-cyber-green font-mono p-4 h-64 overflow-auto\"\n      role=\"textbox\"\n      aria-live=\"polite\"\n      aria-label=\"Cyber terminal\"\n      tabIndex={0}\n    >\n      {output.map((line, i) => (\n        <div key={i}>{parseLine(line, handleNodeClick)}</div>\n      ))}\n\n      <div className=\"flex mt-2\">\n        <span className=\"mr-2\">ANE:~$</span>\n        <input\n          className=\"bg-black flex-grow outline-none\"\n          value={input}\n          onChange={e => setInput(e.target.value)}\n          onKeyDown={onKeyDown}\n          autoFocus\n        />\n      </div>\n    </div>\n  );\n}\n"],"names":["parseLine","line","onNodeClick","elements","lastIndex","regex","match","index","color","text","React","nodeName","handlers","_args","out","setOut","n","prev","_out","pct","iv","aliasMap","CyberTerminal","output","setOutput","useState","input","setInput","terminalRef","useRef","useEffect","handleNodeClick","run","parts","raw","cmd","handler","args","parseArgs","onKeyDown","e"],"mappings":"oGAWA,SAASA,EAAUC,EAAcC,EAAkD,CACjF,MAAMC,EAAwB,CAAA,EAC9B,IAAIC,EAAY,EAGhB,MAAMC,EAAQ,wFACd,IAAIC,EAEJ,MAAQA,EAAQD,EAAM,KAAKJ,CAAI,KAAO,MAAM,CAC1C,KAAM,CAAE,MAAAM,GAAUD,EAKlB,GAHIC,EAAQH,GACVD,EAAS,KAAKF,EAAK,MAAMG,EAAWG,CAAK,CAAC,EAExCD,EAAM,QAAQ,IAAK,CACrB,MAAME,EAAQF,EAAM,OAAO,IACrBG,EAAOH,EAAM,OAAO,KAC1BH,EAAS,KACPO,EAAA,cAAC,OAAA,CACC,IAAKH,EACL,UAAW,CACT,MAAO,iBACP,IAAK,eACL,OAAQ,kBACR,KAAM,eAAA,EACNC,CAAK,CAAA,EAENC,CAAA,CACH,CAEJ,SAAWH,EAAM,QAAQ,KAAM,CAC7B,MAAMK,EAAWL,EAAM,OAAO,KAC9BH,EAAS,KACPO,EAAA,cAAC,SAAA,CACC,IAAKH,EACL,UAAU,kCACV,QAAS,IAAML,EAAYS,CAAQ,CAAA,EAElCA,CAAA,CACH,CAEJ,CACAP,EAAYC,EAAM,SACpB,CAGA,OAAID,EAAYH,EAAK,QACnBE,EAAS,KAAKF,EAAK,MAAMG,CAAS,CAAC,EAE9BD,CACT,CAUA,MAAMS,EAAoC,CACxC,KAAM,CAACC,EAAOC,EAAKC,IACjBA,EAAO,CACL,GAAGD,EACH,qCACA,mCACA,sDACA,4CACA,iCACA,6CAAA,CACD,EAEH,OAAQ,CAACD,EAAOC,EAAKC,IACnBA,EAAO,CACL,GAAGD,EACH,oDACA,8BACA,wCAAA,CACD,EAEH,MAAO,CAACD,EAAOC,EAAKC,IAAW,CAC7BA,EAAO,CAAC,GAAGD,EAAK,QAAQ,CAAC,EACzB,CAAC,UAAW,UAAW,SAAS,EAAE,QAAQE,GACxCD,EAAOE,GAAQ,CAAC,GAAGA,EAAM,WAAWD,CAAC,SAAS,CAAC,CAAA,CAEnD,EAEA,MAAO,CAACH,EAAOK,EAAMH,IAAWA,EAAO,CAAA,CAAE,EAEzC,KAAM,CAACF,EAAOC,EAAKC,IAAW,CAC5BA,EAAO,CAAC,GAAGD,EAAK,qCAAqC,CAAC,EACtD,IAAIK,EAAM,EACV,MAAMC,EAAK,YAAY,IAAM,CAC3BD,GAAO,GACPJ,KAAe,CAAC,GAAGE,EAAM,0BAA0BE,CAAG,GAAG,CAAC,EACtDA,GAAO,MACT,cAAcC,CAAE,EAChBL,EAAOE,GAAQ,CAAC,GAAGA,EAAM,+BAA+B,CAAC,EAE7D,EAAG,GAAG,CACR,CACF,EAEMI,EAAmC,CACvC,EAAG,OACH,EAAG,SACH,EAAG,QACH,EAAG,QACH,GAAI,MACN,EAEA,SAAwBC,GAAgB,CACtC,KAAM,CAACC,EAAQC,CAAS,EAAIC,EAAAA,SAAmB,CAAA,CAAE,EAC3C,CAACC,EAAOC,CAAQ,EAAIF,EAAAA,SAAS,EAAE,EAC/BG,EAAcC,EAAAA,OAAuB,IAAI,EAE/CC,EAAAA,UAAU,IAAM,CACdF,EAAY,SAAS,SAAS,EAAGA,EAAY,QAAQ,YAAY,CACnE,EAAG,CAACL,CAAM,CAAC,EAEX,MAAMQ,EAAmBpB,GAAqB,CAC5C,MAAM,sBAAsBA,CAAQ,KAAK,CAE3C,EAEMqB,EAAO/B,GAAiB,CAC5B,MAAMgC,EAAQhC,EAAK,KAAA,EAAO,MAAM,KAAK,EACrC,GAAI,CAACgC,EAAM,CAAC,EAAG,OACf,MAAMC,EAAMD,EAAM,CAAC,EAAE,YAAA,EACfE,EAAMd,EAASa,CAAG,GAAKA,EACvBE,EAAUxB,EAASuB,CAAG,EACtBE,EAAOC,EAAUL,EAAM,MAAM,CAAC,CAAC,EACrCT,KAAkB,CAAC,GAAGP,EAAM,UAAUhB,CAAI,EAAE,CAAC,EACzCmC,EAASA,EAAQC,EAAMd,EAAQC,CAAS,EACvCA,KAAkB,CAAC,GAAGP,EAAM,+BAA+BiB,CAAG,EAAE,CAAC,CACxE,EAEMK,EAAaC,GAAuC,CACpDA,EAAE,MAAQ,UACZR,EAAIN,CAAK,EACTC,EAAS,EAAE,EAEf,EAEA,OACEjB,EAAA,cAAC,MAAA,CACC,IAAKkB,EACL,UAAU,6DACV,KAAK,UACL,YAAU,SACV,aAAW,iBACX,SAAU,CAAA,EAETL,EAAO,IAAI,CAACtB,EAAM,IACjBS,EAAA,cAAC,MAAA,CAAI,IAAK,CAAA,EAAIV,EAAUC,EAAM8B,CAAe,CAAE,CAChD,EAEDrB,EAAA,cAAC,OAAI,UAAU,WAAA,kBACZ,OAAA,CAAK,UAAU,MAAA,EAAO,QAAM,EAC7BA,EAAA,cAAC,QAAA,CACC,UAAU,kCACV,MAAOgB,EACP,SAAUc,GAAKb,EAASa,EAAE,OAAO,KAAK,EACtC,UAAAD,EACA,UAAS,EAAA,CAAA,CAEb,CAAA,CAGN"}