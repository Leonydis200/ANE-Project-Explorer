(function(s,t){typeof exports=="object"&&typeof module<"u"?t(exports,require("react")):typeof define=="function"&&define.amd?define(["exports","react"],t):(s=typeof globalThis<"u"?globalThis:s||self,t(s.index={},s.React))})(this,function(s,t){"use strict";var f=Object.defineProperty;var h=(s,t,o)=>t in s?f(s,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):s[t]=o;var i=(s,t,o)=>(h(s,typeof t!="symbol"?t+"":t,o),o);class o{constructor(){i(this,"listeners");i(this,"audioContext");i(this,"audioBuffer");i(this,"audioBufferSourceNode");i(this,"snapshot");i(this,"updateAudioData",e=>{const a=this.snapshot.data;this.snapshot={...this.snapshot,data:{...a,...e}},this.emitChange()});i(this,"resetAudio",()=>{this.updateAudioData({isPlaying:!1,isPause:!1})});i(this,"playAudio",()=>{const e=this.audioContext.createBufferSource();e.buffer=this.audioBuffer,e.connect(this.audioContext.destination),e.start(),this.audioBufferSourceNode=e,this.audioBufferSourceNode.addEventListener("ended",this.resetAudio)});i(this,"play",()=>{switch(this.audioContext.state!=="suspended"&&!this.snapshot.data.isPause&&this.audioBufferSourceNode.removeEventListener("ended",this.resetAudio),this.audioContext.state){case"closed":{this.audioContext=new AudioContext,this.playAudio(),this.updateAudioData({isPause:!1,isPlaying:!0,audioBufferSourceNode:this.audioBufferSourceNode});break}case"suspended":{this.audioContext.resume(),this.snapshot.data.isPause?this.updateAudioData({isPause:!1,isPlaying:!0,audioBufferSourceNode:this.audioBufferSourceNode}):(this.playAudio(),this.updateAudioData({isPause:!1,isPlaying:!0,audioBufferSourceNode:this.audioBufferSourceNode}));break}case"running":{this.playAudio(),this.updateAudioData({isPause:!1,isPlaying:!0,audioBufferSourceNode:this.audioBufferSourceNode});break}}});i(this,"stop",()=>{this.audioContext.state==="running"&&this.snapshot.data.isPlaying&&this.audioBufferSourceNode.stop(),this.audioContext.state!=="closed"&&this.audioContext.close(),this.audioBufferSourceNode.disconnect(),this.updateAudioData({isPause:!1,isPlaying:!1})});i(this,"pause",()=>{this.audioContext.state==="running"&&this.snapshot.data.isPlaying&&this.audioContext.suspend(),this.updateAudioData({isPlaying:!1,isPause:!0})});i(this,"subscribe",(e,a)=>(this.listeners.add(e),this.updateAudioData({name:a}),fetch(a).then(u=>u.arrayBuffer()).then(u=>this.audioContext.decodeAudioData(u)).then(u=>this.audioBuffer=u).then(this.emitChange).catch(u=>console.error(u.message)),()=>{this.listeners.delete(e),this.audioBufferSourceNode.disconnect(),this.audioContext.state!=="closed"&&this.audioContext.close(),this.audioContext=new AudioContext,this.audioBufferSourceNode=this.audioContext.createBufferSource(),this.audioBuffer=null,this.updateAudioData({name:"",isPause:!1,isPlaying:!1,audioBufferSourceNode:this.audioBufferSourceNode}),this.audioBufferSourceNode.removeEventListener("ended",this.resetAudio)}));i(this,"getSnapshot",()=>this.snapshot);i(this,"emitChange",()=>{this.listeners.forEach(e=>e())});this.listeners=new Set,this.audioContext=new AudioContext,this.audioBufferSourceNode=this.audioContext.createBufferSource(),this.audioBuffer=null,this.snapshot={data:{isPlaying:!1,isPause:!1,name:"",audioBufferSourceNode:this.audioBufferSourceNode},play:this.play,stop:this.stop,pause:this.pause}}}const n=d=>{const e=t.useRef(null);e.current===null&&(e.current=new o);const a=t.useCallback(r=>e.current.subscribe(r,d),[d]);return t.useSyncExternalStore(a,e==null?void 0:e.current.getSnapshot)};s.AudioController=o,s.useAudio=n,Object.defineProperty(s,Symbol.toStringTag,{value:"Module"})});
